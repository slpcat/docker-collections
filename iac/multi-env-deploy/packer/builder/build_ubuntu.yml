---
variables:
  org: "{{env `ORG`}}"
  app: "{{env `APP`}}"
  env: "{{env `ENV`}}"
  comp: "{{env `COMP`}}"
  aws_region: "{{env `AWS_REGION`}}"
  aws_vpc: "{{env `AWS_VPC`}}"
  aws_subnet: "{{env `AWS_SUBNET`}}"
  aws_security_group: "{{env `AWS_SECURITY_GROUP`}}"
  aws_ami: "{{env `AWS_AMI`}}"
  aws_instance_type: "{{env `AWS_INSTANCE_TYPE`}}"
  aws_iam_instance_profile: "{{env `AWS_IAM_INSTANCE_PROFILE`}}"
  aws_encrypt_boot: "{{env `AWS_ENCRYPT_BOOT`}}"
  aws_kms_key_id: "{{env `AWS_KMS_KEY_ID`}}"
  ansible_vault_pass: "{{env `ANSIBLE_VAULT_PASS`}}"
  ansible_playbook_file: "{{env `ANSIBLE_PLAYBOOK_FILE`}}"
  ansible_playbook_dir: "{{env `ANSIBLE_PLAYBOOK_DIR`}}"
  ansible_group_vars_dir: "{{env `ANSIBLE_GROUP_VARS_DIR`}}"
  ansible_extra_arguments: "{{env `ANSIBLE_EXTRA_ARGUMENTS`}}"
  ansible_extra_vars: "{{env `ANSIBLE_EXTRA_VARS`}}"
builders:
  - type: "amazon-ebs"
    ami_name: "{{user `app`}} {{user `env`}} {{user `comp`}} {{timestamp}}"
    ami_virtualization_type: "hvm"
    # https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/enhanced-networking.html#enabling_enhanced_networking
    # ena_support: true
    # sriov_support: true
    # ebs_optimized: true
    encrypt_boot: "{{user `aws_encrypt_boot`}}"
    kms_key_id: "{{user `aws_kms_key_id`}}"
    # region_kms_key_ids
    region: "{{user `aws_region`}}"
    instance_type: "{{ user `aws_instance_type` }}"
    # source_ami: "{{ user `aws_ami` }}"
    source_ami_filter:
      filters:
        virtualization-type: hvm
        name: ubuntu-minimal/images/hvm-ssd/ubuntu-bionic*
        root-device-type: ebs
      owners: ["099720109477"]
      most_recent: true
    iam_instance_profile: "{{user `aws_iam_instance_profile`}}"
    launch_block_device_mappings:
      - device_name: "/dev/sda1"
        volume_size: 8
        volume_type: "gp2"
        delete_on_termination: true
    security_group_id: "{{user `aws_security_group`}}"
    # security_group_filter
    subnet_id: "{{user `aws_subnet`}}"
    subnet_filter:
      filters: {"tag:type": "public"}
      most_free: true
      random: false
    vpc_id: "{{user `aws_vpc`}}"
    vpc_filter:
      filters: {"tag:app": "{{user `app`}}", "isDefault": "false"}
    associate_public_ip_address: "true"
    communicator: "ssh"
    ssh_username: "ubuntu"
    ssh_pty: "true"
    tags:
      org: "{{user `org`}}"
      app: "{{user `app`}}"
      env: "{{user `env`}}"
      comp: "{{user `comp`}}"
provisioners:
  - type: "shell"
    inline:
      - "sudo systemctl disable apt-daily.service"
      - "sudo systemctl disable apt-daily.timer"
      - "sudo systemctl stop apt-daily.service"
      - "sudo systemctl disable apt-daily-upgrade.service"
      - "sudo systemctl disable apt-daily-upgrade.timer"
      - "sudo systemctl stop apt-daily-upgrade.service"
      - "sudo DEBIAN_FRONTEND=noninteractive apt-get update -yq"
      - "sudo DEBIAN_FRONTEND=noninteractive apt-get upgrade -yq"
      - "sudo sync"
  - type: "shell"
    # Wait for package files to get to disk
    pause_before: "20s"
    inline:
      - "sudo DEBIAN_FRONTEND=noninteractive apt-get update -yq"
      - "sudo DEBIAN_FRONTEND=noninteractive apt-get install software-properties-common -y --no-install-recommends"
      - "sudo apt-add-repository -y ppa:ansible/ansible"
      # - "sudo rm -rf /var/lib/apt/lists/*"
      - "sudo apt-get autoclean"
      - "sudo apt-get -yqf install ansible"
  - type: "ansible-local"
    playbook_dir: "{{user `ansible_playbook_dir`}}"
    playbook_file: "{{user `ansible_playbook_file`}}"
    inventory_groups: "tag_app_{{user `app`}},tag_env_{{user `env`}},tag_comp_{{user `comp`}}"
    group_vars: "{{user `ansible_group_vars_dir`}}"
    command: "echo '{{user `ansible_vault_pass`}}' | ansible-playbook"
    extra_arguments:
      - "--vault-password-file=/bin/cat"
      - "{{user `ansible_extra_arguments`}}"
      - "--extra-vars \"{{user `ansible_extra_vars`}}\""
    # clean_staging_directory: true
